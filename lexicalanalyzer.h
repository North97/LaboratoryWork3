#ifndef LEXICALANALYZER_H
#define LEXICALANALYZER_H

#include <vector>
#include <iostream>
#include <set>
#include <fstream>
#include <queue>
#include <sstream>

/**
    Класс, реализующий лексический анализатор посредством конечного автомата.

    Состояния конечного автомата (типы возможных лексем):
        0 - Символ разделитель
        1 - Идентификатор/ключевое слово
        2 - Числовая константа
        3 - Оператор присваивания
        4 - Разделитель операторов ;
        5 - Арифметические операции низкого приоритета +, -
        6 - Арифметические операции высокого приоритета *,\
        7 - Тип лексемы, не пренадлежащей данному языку

    Классы входных символов:
        0 - Символ разделитель
        1 - Десятичное число
        2 - Буква латинского алфавита
        3 - Символ оператора присваивания =
        4 - Символ разделителя операторов ;
        5 - Символ арифметической операции низкого приоритета +, -
        6 - Символ арифметической операции высокого приоритета *, \
        7 - Класс символов, не пренадлежащих данному языку
*/
class LexicalAnalyzer
{
private:
    /**
        Детерменированный конечный автомат языка, реализованный в виде матрицы переходов.
    */
    std::vector<std::vector<int>> stateMachine = {
     //  0  1  2  3  4  5  6  7
        {0, 0, 0, 0, 0, 0, 0, 0}, // 0
        {2, 1, 2, 2, 2, 2, 2, 7}, // 1
        {1, 1, 7, 1, 1, 1, 1, 7}, // 2
        {3, 3, 3, 3, 3, 3, 3, 3}, // 3
        {4, 4, 4, 4, 4, 4, 4, 4}, // 4
        {5, 5, 5, 5, 5, 5, 5, 5}, // 5
        {6, 6, 6, 6, 6, 6, 6, 6}, // 6
        {7, 7, 7, 7, 7, 7, 7, 7}  // 7
    };
    /** Результирующий список лексем языка. */
    std::vector<std::string> resultLexeme;

    /** Сепараторы языка. */
    std::set<char> separators = {' ', '\n', '\t', '+', '-', ';', '*', '\\', '='};

    /** Незначащие сепараторы языка. */
    std::set<char> insignSeparators = {' ', '\n', '\t'};

    /** Ключевые слова языка. */
    std::set<std::string> keywords = {"case", "select", "end", "default"};

    /** Метод, приводящий входной символ к определенному классу. */
    int toSymbolClass(char &);

    /** Метод возвращает информацию о входной лексеме. */
    std::string lexemeInfo(int &, std::string &);

public:
    LexicalAnalyzer();

    /** Вывод результата алгоритма. */
    void print();

    /** Запуск алгоритма лексического анализатора. */
    void run(std::ifstream &);
};

#endif // LEXICALANALYZER_H
